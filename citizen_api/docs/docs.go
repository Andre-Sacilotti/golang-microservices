// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/citizen": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Citizen"
                ],
                "summary": "Get a list of citizens",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offset for pagination in request",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit how many citizens will be returned",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/delivery.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/delivery.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Citizen"
                ],
                "summary": "Insert a new citizen data",
                "parameters": [
                    {
                        "description": "Citizen can have many addresses and debts",
                        "name": "citizen_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Citizen"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/delivery.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/delivery.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "delivery.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "delivery.Response": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Citizen"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "domain.Address": {
            "type": "object",
            "required": [
                "address",
                "complement",
                "postal_code"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "citizen_id": {
                    "type": "integer"
                },
                "city": {
                    "type": "string"
                },
                "complement": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean",
                    "default": false
                },
                "id": {
                    "type": "integer"
                },
                "neighbourhood": {
                    "type": "string"
                },
                "number": {
                    "type": "string",
                    "default": "false"
                },
                "postal_code": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "domain.Citizen": {
            "type": "object",
            "required": [
                "address",
                "birthdate",
                "cpf",
                "debts",
                "name"
            ],
            "properties": {
                "address": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Address"
                    }
                },
                "birthdate": {
                    "type": "string"
                },
                "cpf": {
                    "type": "string"
                },
                "debts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Debt"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "domain.Debt": {
            "type": "object",
            "required": [
                "credit_taken_at",
                "debtor_id",
                "value"
            ],
            "properties": {
                "credit_taken_at": {
                    "type": "string"
                },
                "credit_turned_debit_at": {
                    "type": "string"
                },
                "debtor_id": {
                    "type": "integer"
                },
                "deleted": {
                    "type": "boolean",
                    "default": false
                },
                "id": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                },
                "was_negociated": {
                    "type": "boolean",
                    "default": false
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
